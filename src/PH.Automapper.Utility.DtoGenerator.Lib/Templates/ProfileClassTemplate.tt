<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
using System;
using System.Linq;
using AutoMapper;
using <#= EntityNameSpace #>;
using <#= DtoNameSpace #>;


namespace <#= ProfileNameSpaceName #>
{
    /// <summary>
    /// AutoMapper Profile class for <see cref="<#= EntityNameSpace #>.<#= EntityName #>"/> and <see cref="<#= DtoNameSpace #>.<#= DtoName #>"/> mapping
    /// </summary>
    /// <seealso cref="AutoMapper.Profile" />
    <#= GetModifier #> class <#= EntityName #>Profile : AutoMapper.Profile
    {
        public <#= EntityName #>Profile()
        {
            CreateMap<<#= EntityName #>, <#= DtoName #>>()

            #region Entity to Dto

<# foreach (PropertyInfo item in Properties)   
   { #>
            .ForMember(x => x.<#= item.Name #>, o => o.MapFrom(src => src.<#= item.Name #>))

<# } 
#>	            
            .AfterMap(AfterMapEntityToDto)
            
            #endregion
                   
            .ReverseMap()

            #region Dto to Entity

<# foreach (PropertyInfo item in Properties)   
   { #>
            .ForMember(x => x.<#= item.Name #>, o => o.MapFrom(src => src.<#= item.Name #>))

<# } 
#>	            
      
            .AfterMap(AfterMapDtoToEntity);
                
            #endregion
                   
            }

            #region private methods and after maps


            /// <summary>Afters the map entity to dto.</summary>
            /// <param name="entity">The entity.</param>
            /// <param name="dto">The dto.</param>
            /// <param name="context">The context.</param>
            private void AfterMapEntityToDto(<#= EntityName #> entity, <#= DtoName #> dto, ResolutionContext context)
            {
                //
            }

            /// <summary>Afters the map dto to entity.</summary>
            /// <param name="dto">The dto.</param>
            /// <param name="entity">The entity.</param>
            /// <param name="context">The context.</param>
            private void AfterMapDtoToEntity(<#= DtoName #> dto, <#= EntityName #> entity, ResolutionContext context)
            {
                //
            }

            #endregion
        }
    }
}
